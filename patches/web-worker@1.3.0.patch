diff --git a/cjs/browser.js b/cjs/browser.js
deleted file mode 100644
index e9a5c1e9cdc8c6eea714b8a2122851517f317a63..0000000000000000000000000000000000000000
diff --git a/cjs/node.js b/cjs/node.js
deleted file mode 100644
index 691f55c2152bbb8d4695b45a6c0b49a41a15749c..0000000000000000000000000000000000000000
diff --git a/dist/browser.js b/dist/browser.js
new file mode 100644
index 0000000000000000000000000000000000000000..ded457fdaaa3ac4c2e8e307e841aace9dc396a79
--- /dev/null
+++ b/dist/browser.js
@@ -0,0 +1,25 @@
+var __defProp = Object.defineProperty;
+var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
+var __getOwnPropNames = Object.getOwnPropertyNames;
+var __hasOwnProp = Object.prototype.hasOwnProperty;
+var __export = (target, all) => {
+  for (var name in all)
+    __defProp(target, name, { get: all[name], enumerable: true });
+};
+var __copyProps = (to, from, except, desc) => {
+  if (from && typeof from === "object" || typeof from === "function") {
+    for (let key of __getOwnPropNames(from))
+      if (!__hasOwnProp.call(to, key) && key !== except)
+        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
+  }
+  return to;
+};
+var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
+
+// browser.js
+var browser_exports = {};
+__export(browser_exports, {
+  default: () => browser_default
+});
+module.exports = __toCommonJS(browser_exports);
+var browser_default = Worker;
diff --git a/dist/browser.mjs b/dist/browser.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..77b496c4dcf2bf035aa5c275f14a77d81d819796
--- /dev/null
+++ b/dist/browser.mjs
@@ -0,0 +1,5 @@
+// browser.js
+var browser_default = Worker;
+export {
+  browser_default as default
+};
diff --git a/dist/node.js b/dist/node.js
new file mode 100644
index 0000000000000000000000000000000000000000..c74999512dee24a74204d20644750fce3b90899d
--- /dev/null
+++ b/dist/node.js
@@ -0,0 +1,213 @@
+var __create = Object.create;
+var __defProp = Object.defineProperty;
+var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
+var __getOwnPropNames = Object.getOwnPropertyNames;
+var __getProtoOf = Object.getPrototypeOf;
+var __hasOwnProp = Object.prototype.hasOwnProperty;
+var __export = (target, all) => {
+  for (var name in all)
+    __defProp(target, name, { get: all[name], enumerable: true });
+};
+var __copyProps = (to, from, except, desc) => {
+  if (from && typeof from === "object" || typeof from === "function") {
+    for (let key of __getOwnPropNames(from))
+      if (!__hasOwnProp.call(to, key) && key !== except)
+        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
+  }
+  return to;
+};
+var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
+  // If the importer is in node compatibility mode or this is not an ESM
+  // file that has been converted to a CommonJS file using a Babel-
+  // compatible transform (i.e. "__esModule" has not been set), then set
+  // "default" to the CommonJS "module.exports" for node compatibility.
+  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
+  mod
+));
+var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
+
+// node.js
+var node_exports = {};
+__export(node_exports, {
+  default: () => node_default
+});
+module.exports = __toCommonJS(node_exports);
+var import_url = __toESM(require("url"));
+var import_vm = __toESM(require("vm"));
+var import_worker_threads = __toESM(require("worker_threads"));
+var WORKER = Symbol.for("worker");
+var EVENTS = Symbol.for("events");
+var EventTarget = class {
+  constructor() {
+    Object.defineProperty(this, EVENTS, {
+      value: /* @__PURE__ */ new Map()
+    });
+  }
+  dispatchEvent(event) {
+    event.target = event.currentTarget = this;
+    if (this["on" + event.type]) {
+      try {
+        this["on" + event.type](event);
+      } catch (err) {
+        console.error(err);
+      }
+    }
+    const list = this[EVENTS].get(event.type);
+    if (list == null)
+      return;
+    list.forEach((handler) => {
+      try {
+        handler.call(this, event);
+      } catch (err) {
+        console.error(err);
+      }
+    });
+  }
+  addEventListener(type, fn) {
+    let events = this[EVENTS].get(type);
+    if (!events)
+      this[EVENTS].set(type, events = []);
+    events.push(fn);
+  }
+  removeEventListener(type, fn) {
+    let events = this[EVENTS].get(type);
+    if (events) {
+      const index = events.indexOf(fn);
+      if (index !== -1)
+        events.splice(index, 1);
+    }
+  }
+};
+function Event(type, target) {
+  this.type = type;
+  this.timeStamp = Date.now();
+  this.target = this.currentTarget = this.data = null;
+}
+var node_default = import_worker_threads.default.isMainThread ? mainThread() : workerThread();
+var baseUrl = import_url.default.pathToFileURL(process.cwd() + "/");
+function mainThread() {
+  class Worker extends EventTarget {
+    constructor(url, options) {
+      super();
+      const { name, type } = options || {};
+      url += "";
+      let mod;
+      if (/^data:/.test(url)) {
+        mod = url;
+      } else {
+        mod = import_url.default.fileURLToPath(new import_url.default.URL(url, baseUrl));
+      }
+      const worker = new import_worker_threads.default.Worker(
+        __filename,
+        { workerData: { mod, name, type } }
+      );
+      Object.defineProperty(this, WORKER, {
+        value: worker
+      });
+      worker.on("message", (data) => {
+        const event = new Event("message");
+        event.data = data;
+        this.dispatchEvent(event);
+      });
+      worker.on("error", (error) => {
+        error.type = "error";
+        this.dispatchEvent(error);
+      });
+      worker.on("exit", () => {
+        this.dispatchEvent(new Event("close"));
+      });
+    }
+    postMessage(data, transferList) {
+      this[WORKER].postMessage(data, transferList);
+    }
+    terminate() {
+      this[WORKER].terminate();
+    }
+  }
+  Worker.prototype.onmessage = Worker.prototype.onerror = Worker.prototype.onclose = null;
+  return Worker;
+}
+function workerThread() {
+  let { mod, name, type } = import_worker_threads.default.workerData;
+  if (!mod)
+    return mainThread();
+  const self = global.self = global;
+  let q = [];
+  function flush() {
+    const buffered = q;
+    q = null;
+    buffered.forEach((event) => {
+      self.dispatchEvent(event);
+    });
+  }
+  import_worker_threads.default.parentPort.on("message", (data) => {
+    const event = new Event("message");
+    event.data = data;
+    if (q == null)
+      self.dispatchEvent(event);
+    else
+      q.push(event);
+  });
+  import_worker_threads.default.parentPort.on("error", (err) => {
+    err.type = "Error";
+    self.dispatchEvent(err);
+  });
+  class WorkerGlobalScope extends EventTarget {
+    postMessage(data, transferList) {
+      import_worker_threads.default.parentPort.postMessage(data, transferList);
+    }
+    // Emulates https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close
+    close() {
+      process.exit();
+    }
+  }
+  let proto = Object.getPrototypeOf(global);
+  delete proto.constructor;
+  Object.defineProperties(WorkerGlobalScope.prototype, proto);
+  proto = Object.setPrototypeOf(global, new WorkerGlobalScope());
+  ["postMessage", "addEventListener", "removeEventListener", "dispatchEvent"].forEach((fn) => {
+    proto[fn] = proto[fn].bind(global);
+  });
+  global.name = name;
+  const isDataUrl = /^data:/.test(mod);
+  if (type === "module") {
+    import(mod).catch((err) => {
+      if (isDataUrl && err.message === "Not supported") {
+        console.warn("Worker(): Importing data: URLs requires Node 12.10+. Falling back to classic worker.");
+        return evaluateDataUrl(mod, name);
+      }
+      console.error(err);
+    }).then(flush);
+  } else {
+    try {
+      if (/^data:/.test(mod)) {
+        evaluateDataUrl(mod, name);
+      } else {
+        require(mod);
+      }
+    } catch (err) {
+      console.error(err);
+    }
+    Promise.resolve().then(flush);
+  }
+}
+function evaluateDataUrl(url, name) {
+  const { data } = parseDataUrl(url);
+  return import_vm.default.runInThisContext(data, {
+    filename: "worker.<" + (name || "data:") + ">"
+  });
+}
+function parseDataUrl(url) {
+  let [m, type, encoding, data] = url.match(/^data: *([^;,]*)(?: *; *([^,]*))? *,(.*)$/) || [];
+  if (!m)
+    throw Error("Invalid Data URL.");
+  if (encoding)
+    switch (encoding.toLowerCase()) {
+      case "base64":
+        data = Buffer.from(data, "base64").toString();
+        break;
+      default:
+        throw Error('Unknown Data URL encoding "' + encoding + '"');
+    }
+  return { type, data };
+}
diff --git a/dist/node.mjs b/dist/node.mjs
new file mode 100644
index 0000000000000000000000000000000000000000..22b07aff97955c23a40dafa0df5be0a1b6b3bcaa
--- /dev/null
+++ b/dist/node.mjs
@@ -0,0 +1,191 @@
+var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
+  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
+}) : x)(function(x) {
+  if (typeof require !== "undefined")
+    return require.apply(this, arguments);
+  throw Error('Dynamic require of "' + x + '" is not supported');
+});
+
+// node.js
+import URL from "url";
+import VM from "vm";
+import threads from "worker_threads";
+var WORKER = Symbol.for("worker");
+var EVENTS = Symbol.for("events");
+var EventTarget = class {
+  constructor() {
+    Object.defineProperty(this, EVENTS, {
+      value: /* @__PURE__ */ new Map()
+    });
+  }
+  dispatchEvent(event) {
+    event.target = event.currentTarget = this;
+    if (this["on" + event.type]) {
+      try {
+        this["on" + event.type](event);
+      } catch (err) {
+        console.error(err);
+      }
+    }
+    const list = this[EVENTS].get(event.type);
+    if (list == null)
+      return;
+    list.forEach((handler) => {
+      try {
+        handler.call(this, event);
+      } catch (err) {
+        console.error(err);
+      }
+    });
+  }
+  addEventListener(type, fn) {
+    let events = this[EVENTS].get(type);
+    if (!events)
+      this[EVENTS].set(type, events = []);
+    events.push(fn);
+  }
+  removeEventListener(type, fn) {
+    let events = this[EVENTS].get(type);
+    if (events) {
+      const index = events.indexOf(fn);
+      if (index !== -1)
+        events.splice(index, 1);
+    }
+  }
+};
+function Event(type, target) {
+  this.type = type;
+  this.timeStamp = Date.now();
+  this.target = this.currentTarget = this.data = null;
+}
+var node_default = threads.isMainThread ? mainThread() : workerThread();
+var baseUrl = URL.pathToFileURL(process.cwd() + "/");
+function mainThread() {
+  class Worker extends EventTarget {
+    constructor(url, options) {
+      super();
+      const { name, type } = options || {};
+      url += "";
+      let mod;
+      if (/^data:/.test(url)) {
+        mod = url;
+      } else {
+        mod = URL.fileURLToPath(new URL.URL(url, baseUrl));
+      }
+      const worker = new threads.Worker(
+        __filename,
+        { workerData: { mod, name, type } }
+      );
+      Object.defineProperty(this, WORKER, {
+        value: worker
+      });
+      worker.on("message", (data) => {
+        const event = new Event("message");
+        event.data = data;
+        this.dispatchEvent(event);
+      });
+      worker.on("error", (error) => {
+        error.type = "error";
+        this.dispatchEvent(error);
+      });
+      worker.on("exit", () => {
+        this.dispatchEvent(new Event("close"));
+      });
+    }
+    postMessage(data, transferList) {
+      this[WORKER].postMessage(data, transferList);
+    }
+    terminate() {
+      this[WORKER].terminate();
+    }
+  }
+  Worker.prototype.onmessage = Worker.prototype.onerror = Worker.prototype.onclose = null;
+  return Worker;
+}
+function workerThread() {
+  let { mod, name, type } = threads.workerData;
+  if (!mod)
+    return mainThread();
+  const self = global.self = global;
+  let q = [];
+  function flush() {
+    const buffered = q;
+    q = null;
+    buffered.forEach((event) => {
+      self.dispatchEvent(event);
+    });
+  }
+  threads.parentPort.on("message", (data) => {
+    const event = new Event("message");
+    event.data = data;
+    if (q == null)
+      self.dispatchEvent(event);
+    else
+      q.push(event);
+  });
+  threads.parentPort.on("error", (err) => {
+    err.type = "Error";
+    self.dispatchEvent(err);
+  });
+  class WorkerGlobalScope extends EventTarget {
+    postMessage(data, transferList) {
+      threads.parentPort.postMessage(data, transferList);
+    }
+    // Emulates https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close
+    close() {
+      process.exit();
+    }
+  }
+  let proto = Object.getPrototypeOf(global);
+  delete proto.constructor;
+  Object.defineProperties(WorkerGlobalScope.prototype, proto);
+  proto = Object.setPrototypeOf(global, new WorkerGlobalScope());
+  ["postMessage", "addEventListener", "removeEventListener", "dispatchEvent"].forEach((fn) => {
+    proto[fn] = proto[fn].bind(global);
+  });
+  global.name = name;
+  const isDataUrl = /^data:/.test(mod);
+  if (type === "module") {
+    import(mod).catch((err) => {
+      if (isDataUrl && err.message === "Not supported") {
+        console.warn("Worker(): Importing data: URLs requires Node 12.10+. Falling back to classic worker.");
+        return evaluateDataUrl(mod, name);
+      }
+      console.error(err);
+    }).then(flush);
+  } else {
+    try {
+      if (/^data:/.test(mod)) {
+        evaluateDataUrl(mod, name);
+      } else {
+        __require(mod);
+      }
+    } catch (err) {
+      console.error(err);
+    }
+    Promise.resolve().then(flush);
+  }
+}
+function evaluateDataUrl(url, name) {
+  const { data } = parseDataUrl(url);
+  return VM.runInThisContext(data, {
+    filename: "worker.<" + (name || "data:") + ">"
+  });
+}
+function parseDataUrl(url) {
+  let [m, type, encoding, data] = url.match(/^data: *([^;,]*)(?: *; *([^,]*))? *,(.*)$/) || [];
+  if (!m)
+    throw Error("Invalid Data URL.");
+  if (encoding)
+    switch (encoding.toLowerCase()) {
+      case "base64":
+        data = Buffer.from(data, "base64").toString();
+        break;
+      default:
+        throw Error('Unknown Data URL encoding "' + encoding + '"');
+    }
+  return { type, data };
+}
+export {
+  node_default as default
+};
diff --git a/package.json b/package.json
index 6ff2fa313f30525936d694d6b2cb1e59a82a19c3..a372f0cebd4d7d0cae9a4f71c815e7b7a77c4c03 100644
--- a/package.json
+++ b/package.json
@@ -2,43 +2,40 @@
   "name": "web-worker",
   "version": "1.3.0",
   "description": "Consistent Web Workers in browser and Node.",
-  "main": "./cjs/node.js",
-  "browser": "./cjs/browser.js",
+  "main": "./dist/node.js",
+  "browser": "./dist/browser.js",
   "types": "./index.d.ts",
   "exports": {
-    "types": "./index.d.ts",
     "import": {
-      "bun": "./browser.js",
-      "browser": "./browser.js",
-      "default": "./node.js"
+      "types": "./index.d.mts",
+      "bun": "./dist/browser.mjs",
+      "browser": "./dist/browser.mjs",
+      "default": "./dist/node.mjs"
     },
     "module": {
-      "bun": "./browser.js",
-      "browser": "./browser.js",
-      "default": "./node.js"
+      "types": "./index.d.mts",
+      "bun": "./dist/browser.mjs",
+      "browser": "./dist/browser.mjs",
+      "default": "./dist/node.mjs"
     },
     "default": {
-      "bun": "./cjs/browser.js",
-      "browser": "./cjs/browser.js",
-      "default": "./cjs/node.js"
+      "types": "./index.d.ts",
+      "bun": "./dist/browser.js",
+      "browser": "./dist/browser.js",
+      "default": "./dist/node.js"
     }
   },
   "files": [
-    "cjs",
+    "dist",
     "browser.js",
     "node.js",
-    "index.d.ts"
+    "index.d.ts",
+    "index.d.mts"
   ],
   "scripts": {
-    "prepare": "babel node.js browser.js -d cjs",
+    "prepare": "npx tsup",
     "test": "eslint '*.js' test && node --experimental-modules ./node_modules/.bin/ava"
   },
-  "babel": {
-    "plugins": [
-      "@babel/plugin-syntax-dynamic-import",
-      "babel-plugin-commonjs-lite"
-    ]
-  },
   "repository": "developit/web-worker",
   "keywords": [
     "worker",
@@ -58,14 +55,10 @@
     }
   },
   "devDependencies": {
-    "@babel/cli": "^7.21.0",
-    "@babel/core": "^7.21.0",
-    "@babel/plugin-syntax-dynamic-import": "^7.8.3",
-    "@babel/plugin-transform-modules-commonjs": "7.21",
     "ava": "2.4",
-    "babel-plugin-commonjs-lite": "gist:3e38560d5bed35da1fd708d635e4acb3",
     "eslint": "^7.32.0",
     "eslint-config-developit": "^1.2.0",
-    "eslint-plugin-compat": "^4.2.0"
+    "eslint-plugin-compat": "^4.2.0",
+    "tsup": "^8.0.2"
   }
 }
