import {
  CredentialRequest,
  Credentials,
  TokenRequest,
} from '@blockchain-lab-um/oidc-types';

type FormatKeys = 'jwt' | 'jwt_vc' | 'jwt_vp' | 'ldp' | 'ldp_vc' | 'ldp_vp';
type Algorithm = 'ES256K' | 'EdDSA';

type Format = Partial<Record<FormatKeys, { alg: Algorithm[] }>>;

// JWT with the following claims
// [Required] - nonce: A random string generated by the RP to associate the request with the response.
// [Required] - scope: The scope of the request.
// [Required] - response_type: The response type of the request.
// [Required] - client_id: The client ID of the request.
// [Required] - redirect_uri: The redirect URI of the request.
// [Required] - claims: The claims of the request.
export type AuthRequestParams = {
  response_type: 'id_token' | 'vp_token';
  client_id: string;
  redirect_uri: string;
  nonce: string;
  claims: Claims;
};

type Field = {
  path: string[];
  id?: string;
  purpose?: string;
  name?: string;
  filter?: any;
};

// one or both of these are required
type Constraints = {
  limit_disclosure?: 'required' | 'preferred';
  fields?: Field[];
};

type InputDescriptor = {
  id: string;
  name?: string;
  purpose?: string;
  format?: Format;
  constraints: Constraints;
};

export type Claims = {
  presentation_definition: {
    id: string;
    format?: Format;
    input_descriptors: InputDescriptor[];
  };
};

export interface IPluginConfig {
  // Split for ISSUER and VERIFIER
  supported_schema_url: string;
  supported_did_methods: string[]; // e.g. ['ethr', 'key']
  supported_curves: string[]; // e.g. secp256k1, ed25519, etc
  supported_digital_signatures: string[]; // e.g. jwt, json_ld
  db_secret: string;
  url: string; // e.g. https://example.com
}

export type CreateIssuanceInitiationRequestResposne = {
  issuanceInitiationRequest: string;
  preAuthorizedCode: string;
  credentials: Credentials;
};

export type HandlePreAuthorizedCodeTokenRequestArgs = {
  body: TokenRequest;
  preAuthorizedCode: string;
  userPin?: string;
};

export type IsValidTokenRequestArgs = {
  body: TokenRequest;
};

export type IsValidTokenRequestResponse = {
  grantType:
    | 'authorization_code'
    | 'urn:ietf:params:oauth:grant-type:pre-authorized_code';
  preAuthorizedCode?: string;
} & (
  | { grantType: 'authorization_code' }
  | {
      grantType: 'urn:ietf:params:oauth:grant-type:pre-authorized_code';
      preAuthorizedCode: string;
    }
);

export type IsValidAuthorizationHeaderArgs = {
  authorizationHeader: string;
};

export type IsValidAuthorizationHeaderResponse = {
  accessToken: string;
};

export type HandleCredentialRequestArgs = {
  body: CredentialRequest;
  c_nonce?: string;
  c_nonce_expires_in?: number;
};
