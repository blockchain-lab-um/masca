type FormatKeys = 'jwt' | 'jwt_vc' | 'jwt_vp' | 'ldp' | 'ldp_vc' | 'ldp_vp';
type Algorithm = 'ES256K' | 'EdDSA';

type Format = Partial<Record<FormatKeys, { alg: Algorithm[] }>>;

// JWT with the following claims
// [Required] - nonce: A random string generated by the RP to associate the request with the response.
// [Required] - scope: The scope of the request.
// [Required] - response_type: The response type of the request.
// [Required] - client_id: The client ID of the request.
// [Required] - redirect_uri: The redirect URI of the request.
// [Required] - claims: The claims of the request.
export type AuthRequestParams = {
  response_type: 'id_token' | 'vp_token';
  client_id: string;
  redirect_uri: string;
  nonce: string;
  claims: Claims;
};

type Field = {
  path: string[];
  id?: string;
  purpose?: string;
  name?: string;
  filter?: any;
};

// one or both of these are required
type Constraints = {
  limit_disclosure?: 'required' | 'preferred';
  fields?: Field[];
};

type InputDescriptor = {
  id: string;
  name?: string;
  purpose?: string;
  format?: Format;
  constraints: Constraints;
};

export type Claims = {
  presentation_definition: {
    id: string;
    format?: Format;
    input_descriptors: InputDescriptor[];
  };
};
